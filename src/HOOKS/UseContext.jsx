import React, {createContext, useState} from 'react';
//1. импоритруем createContext, useState
//2. создадим контекст и экспортируем его
export const CustomContext = createContext();
//3. контекст имеет два ключа: consumer и provider
//4. можно использовать оба ключа, можно один
//5. так как мы будем использовать хук useContext, то ключ consumer нам не понадобится
//6. сздадим компонент, который будет принимать пропсы и будет использовать состояние
//7. задача состоит в том чтобы пробросить коллекцию книг из этого компонента (родительский) 
//8. и дальше, на других уровнях вложености удалять или добавлять книги в массив

export const UseContext = (props) => {
    const [books, setBooks] = useState([
        {id: 1, title: 'JS'},
        {id: 2, title: 'Java'},
        {id: 3, title: 'React'}
    ]); // по умолчанию зададим массив коллекцию книг, состоящий из объектов
    // 9. создадим методы (функции) для работы с массивом

    // метод добавления книги:
    const addBook = (book) => {
        // функция принимает книгу
        // разворачиваем спредом в новом массиве текущие книги и добавляем новую
        setBooks([...books, book])
    }

    // метод удаления книги:
    const removeBook = (id) => {
        // функция принимает id удаляемой книги
        // пройдем фильтром по массиву и оставим все елементы id которых не равен полученому id
        setBooks(books.filter(item=>item.id !== id))
    }

    //10. для того чтоы передать эти методы в любое место нужно из этого компонента вернуть 
    // все то что придет к нам через пропс.чилдрен и обернуть это в кастомКонтекст.провайдер
    // props.children особый пропс в котором хранятся дочерние элементы ели они были переданы родительскому.
    // также все дочерние элементы будут иметь доступ к полю value.
    
    const value = {
        books,
        addBook,
        removeBook
    }

    return (
        // // передадим (в виде объекта) в поле велью наш массив книг и два метода
        <CustomContext.Provider value={value}> 
            {props.children}
        </CustomContext.Provider>
    );
}

